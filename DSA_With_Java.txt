Data Structure:
----------------
Arranging data in a proper structure is called as Data Structures or Organizing Data is
called as Data Structure.
The following are the various operations, that we can able to perform on data
structures
1. inserting new data
2. removal of existing data
3. updating or replacement of data
4. searching (linar, binary)
5. sorting etc .........

PROBLEM STATEMENT:
-----------------
Write a program to swap given two integer values.
-------------------------------------------------
Logic1:
---------
==> declare one temp variable 'temp'
==> print a and b values
==>
temp = a;
a = b;
b = temp;
==> print a and b value

Implementation:
---------------
import java.util.*;
class Demo
{
static void swap(int a,int b)
{
System.out.println("before swaping a="+a+" and b="+b);
int t;
t = a;
a = b;
b = t;
System.out.println("after swaping a="+a+" and b="+b);
}
}
class Test 
{
    public static void main(String[] args)
    {
            Scanner obj = new Scanner(System.in);
            System.out.println("Enter a value");
            int a = obj.nextInt();
            System.out.println("Enter b value");
            int b = obj.nextInt();
            Demo.swap(a,b);
    }
}

Logic2:
==> print a and b values
==> by using addition and subtraction
a = a + b;
b = a - b;
a = a - b;
==> print a and b value
Implementation:
---------------
import java.util.*;
class Demo
{
static void swap(int a,int b)
{
System.out.println("before swaping a="+a+" and b="+b);
a = a + b;
b = a - b;
a = a - b;
System.out.println("after swaping a="+a+" and b="+b);
}
}
class Test
{
    public static void main(String[] args)
    {
        Scanner obj = new Scanner(System.in);
        System.out.println("Enter a value");
        int a = obj.nextInt();
        System.out.println("Enter b value");
        int b = obj.nextInt();
        Demo.swap(a,b);
    }
}

Logic3:
==> print a and b values
==> by using multiplication and division
a = a * b;
b = a / b;
a = a / b;
==> print a and b value
Implementation:
---------------
import java.util.*;
class Demo
{
    static void swap(int a,int b)
    {
        System.out.println("before swaping a="+a+" and b="+b);
        a = a * b;
        b = a / b;
        a = a / b;
        System.out.println("after swaping a="+a+" and b="+b);
    }
}
class Test
{
    public static void main(String[] args)
    {
        Scanner obj = new Scanner(System.in);
        System.out.println("Enter a value");
        int a = obj.nextInt();
        System.out.println("Enter b value");
        int b = obj.nextInt();
        Demo.swap(a,b);
    }
}

Logic4: without using temp variable using bitwise operators
------------------------------------------------------------
==> print a and b values
==> by using bitwise operators
a = a ^ b;
b = a ^ b;
a = a ^ b;
==> print a and b value
Note: Dec into Bin and Bin into Dec
Implementation:
---------------
import java.util.*;
class Demo
{
    static void swap(int a,int b)
    {
        System.out.println("before swaping a="+a+" and b="+b);
        a = a ^ b;
        b = a ^ b;
        a = a ^ b;
        System.out.println("after swaping a="+a+" and b="+b);
    }
}
class Test
{
    public static void main(String[] args)
    {
        Scanner obj = new Scanner(System.in);
        System.out.println("Enter a value");
        int a = obj.nextInt();
        System.out.println("Enter b value");
        int b = obj.nextInt();
        Demo.swap(a,b);
    }
}

Logic5: without using temp variable by using single line
------------------------------------------------------------
==> print a and b values
==> by using single line
a = (a+b) - (b=a);
==> print a and b value
Implementation:
---------------
import java.util.*;
class Demo
{
    static void swap(int a,int b)
    {
        System.out.println("before swaping a="+a+" and b="+b);
        a = a+b-(b=a);
        System.out.println("after swaping a="+a+" and b="+b);
    }
}
class Test
{
    public static void main(String[] args)
    {
        Scanner obj = new Scanner(System.in);
        System.out.println("Enter a value");
        int a = obj.nextInt();
        System.out.println("Enter b value");
        int b = obj.nextInt();
        Demo.swap(a,b);
    }
}

performance of an algorithm
~~~~~~~~~~~~~~~~~~~~~~~~~~~
we can measure performance of an algorithm by using the following two
components.
1. space complexity
2. time complexity

space complexity:
-----------------
=> the space complexity of an algorithm is the amount of memory, it needs to run to
complete task.
=> space complexity of any algorithm is calculate as,
s(p) = fixed_part + variable_part
=> fixed part --> independent of instance characterstics
--> space for variables, space for constants etc
=> variable_part --> dependent of instance characterstics
--> looping variables, arrays etc
Ex: addition of three numbers.
------------------------------
algorithm addition(a,b,c)
{
return a+b+c;
}
space complexity ----->
a ---> 1 unit
b ---> 1 unit
c ---> 1 unit
-------------
total: 3 units
--------------
sp(addition) = 3 units
Ex: area of circle
------------------
algorithm areaofcircle(raidus)
{
result = 3.147*radius*radius;
return result;
}
space complexity ----->
radius ---> 1 unit
3.147 ---> 1 unit
result ---> 1 unit
------------------
total: 3 units
------------------
sp(addition) = 3 units
Ex: area of circle
------------------
algorithm areaofcircle(raidus)
{
return 3.147*radius*radius;
}
space complexity ----->
radius ---> 1 unit
3.147 ---> 1 unit
------------------
total: 2 units
------------------
sp(addition) = 2 units
bits/bytes/kb/mb/gb/tb/pb etc
2 x 4 bytes = 8 bytes
int a = 5;
sp(alg) = 1 unit

Ex: sum of elements present in an array by using recursion
----------------------------------------------------------
algorithm sum_of_elements_recursion(a,n)
{
if(n<0)
return 0;
else
return sum_of_elements_recursion(a,n-2)+a[n-1];
}
space complexity ----->
Rsum(a,n) -----> 1(a[n-1]) + 1(n) + 1(return) ---> 3 units
Rsum(a,n-1) ---> 1(a[n-2]) + 1(n) + 1(return) ---> 3 units
.
.
.
.
Rsum(a,n-n) --> 1(a[n-n]) + 1(n) + 1(return) ----> 3 units
-----------------------------------------------------------
total space complexity ----> 3(n+1) ===> 3n+3
-----------------------------------------------------------

time complexity:
----------------
the time complexity of an algorithm is the amount of computer time it needs to
complete the task.
tc(p) = compile time + execution time
= execution time (ignore compile time, compilation will be done only one time)
step count method to calculate time complexity
----------------------------------------------
1) for algorithm heading ------> 0
2) for braces -----------------> 0
3) for expressions ------------> 1
4) for if conditions ----------> 1
5) for loops ------------------> based on number of iterations 'n'

Asymptotic Notations:
~~~~~~~~~~~~~~~~~~~~~
it is used to measure/represent time and space complexity of any algorithm.
1. Big-Oh ----> O
2. Omega ----> W
3. Theta -----> theta
4. Little oh -> o
5. Little omega --> w little omega
Big "Oh" (O):-
~~~~~~~~~~~~~~
a function f(n) is said to be in O(g(n)) denoted by f(n)=O(g(n)) is bounded above by
some constant multiple of g(n) for all n, i.e. there exist positive constant 'c' and non-
negative integer 'n0' such that f(n)<=c*g(n) for every n>=n0.

Ex:
f(n) = 2n+2
g(n) = n^2
where n>=3
Omega Notation (W):-
~~~~~~~~~~~~~~~~~~~~
a function f(n) is said to be in W(g(n)) denoted by f(n)=W(g(n)) is bounded below by
some constant multiple of g(n) for all n, i.e. there exist positive constant 'c' and non-
negative integer 'n0' such that f(n)>=c*g(n) for every n>=n0.
diagram
Ex:
f(n) = 2n^2 + 3
g(n) = 7n
where n0>=3

Theta notation (0):-
~~~~~~~~~~~~~~~~~~~~
a function f(n) is said to be in 0(g(n)) denoted by f(n)=0(g(n)) is bounded with above
and below by some constant multiples of g(n) for all n, i.e. there exist positive
constant 'c1' and 'c2' and non-negative integer 'n0' such that c1*g(n)<=f(n)<=c2*g(n)
for every n>=n0.
digram
Ex:
f(n) = 4n+1
g(n) = n , c1=4 and c2 = 5
where n>=1

Recursion:
----------
01) Introduction to functions
02) Why Recursion?
03) Recursion
04) Base condition
05) Finate and Infinate Recursion
06) Mathematical Interpretation of Recursion
07) Properties of Recursion
08) Advantages & disadvantages of recursion
09) Difference between iteration and recursion
10) Implement a program to print natural numbers from 1 to n
11) Implement a program to calculate sum of 'n' natural numbers
12) Implement a program to calculate a^b (a to the power b)
13) Implement a program to find factorial of the given number?
14) Implement a program to calculate product of two integer values (a*b)
15) Implement a program to check whether the given number is prime number or
not?
16) Implement a program to find sum of digits present in the given number?
17) Implement a program to calcualte reverse of the given number?
18) Implement a program to count number of digits present in the given number?
19) Implement a program to convert decimal number into binary?
20) Implement a program to find nth fib number
21) Implement a program to find LCM of two numbers?
22) Implement a program to find HCF/GCD of the given two numbers
23) Implement a program to find reverse of the given string using recursion?
24) Implement a program to remove the given character from a string?
25) Implement a program to return Str, where all the adjacent chars are sep by a "*".
26) Implement a program to return new string where identical adjcent chars are sep
by *
27) Implement a program to return true if a string nesting of zero or more pairs of ()
28) Implement a program to count number of times, the give char occurred.
29) IMP to replace the given old character with new character in the original string?
30) IMP to count the number of times given string appeared in the original string?
31) IMP to replace the given string with new string?
32) Towers of Hanoi

Recursion:-
~~~~~~~~~~~
==> function: set of instructions or sequence of operations under a common name or
block

Q) can we declare a function within another function or not?
------------------------------------------------------------
Yes, we can define, but only few programming languages are supporting this.
C -----> Yes
C++ ---> Yes
Java --> No

Recursion is a process of calling a method/function by itself, in this process the
method which is invoked is called as 'Recursive Method'.
this recursion is divided into two ways based on method calls...
1) infinate recursion
2) finate recursion
infinate recursion:
-------------------
the method which called by itself, infinate times. we will get Error message 'Stack
Over Flow' error we will get.
Ex:
import java.util.*;
class Demo{
    void m(){
        System.out.println("Good Evening");
        m();
    }
}
class Test
{
    public static void main(String[] args)
    {
        Scanner obj = new Scanner(System.in);
        Demo d = new Demo();
        d.m();
    }
}
output:
-------
Good Evening
Good Evening
Good Evening
Good Evening
.
.
.
Exception in thread "main" java.lang.
finate recursion:-
------------------
a method which is called by itself, and terminates at finate number of steps is called
as finate recursion.
we can make this finate recursion based on 'BASE CONDITION'.

base condition:
---------------
It is a special, we have to create inside recursive calls so that our recursion should
terminate at a finate steps.
import java.util.*;
class Demo{
static int c;
    void m(){
        if(c>10)
        return;
        else
        {
            System.out.println("Good Evening, c="+c);
            c++;
            m();
        }
    }
}
class Test
{
    public static void main(String[] args)
    {
        Scanner obj = new Scanner(System.in);
        Demo d = new Demo();
        d.m();
    }
}

Why we need Recursion:
~~~~~~~~~~~~~~~~~~~~~~
some tims, if we got a problem, we need to divide that big problems, into small small
units, and find solutions for these sub-problems, which inturn creates solution for that
bigger problem. This is the senario major applications are using. Ex: Recusrion, DAC...
Mathematical Interpretation of Recursion:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Ex: Sum of 'n' natural numbers
In Math:
f(n) = 1 + 2 + 3 + 4 + 5 + ...... + n
In Recursion:
f(n) = 1 , n=1
f(n) = n + f(n-1), n>1
f(5) = n + f(n-1) = 5 + f(4)
f(4) = n + f(n-1) = 4 + f(3)
f(3) = n + f(n-1) = 3 + f(2)
f(2) = n + f(n-1) = 2 + f(1)
f(1) = 1
stack ===> 5, 4, 3, 2 , 1
1+2=3+3=6+4=10+5=15

Properties of Recursion:
~~~~~~~~~~~~~~~~~~~~~~~~
1) same operations with multiple inputs.
2) we will divide the entire problem into small problems.
3) base condition is very very important in recursion, else it leads to infinate exe.
advantages of recursion:
~~~~~~~~~~~~~~~~~~~~~~~~
1) recursive algorithms are easier to write.
2) easy to solve natural big problems, Ex: Towers of Hanoi problem
3) reduce unnecessary function calls.
4) reduce length of the code.
5) very useful while solving data structure related problems.
6) we can evaulate some expressions, infix, prefix and postfix etc
disadvanatges of recursion:
~~~~~~~~~~~~~~~~~~~~~~~~~~~
1) recursion uses extra stack space.
2) redundent computations
3) tracing will be difficult
4) slower in execution
5) runs out of memory (StackOverFlow Error)

difference between recursion and iteration?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Recursion:
----------
1) terminates when base condition is true.
2) functions concept.
3) extra space is required.
4) smaller code.
Iteration:
----------
1) terminates when condition is false.
2) looping statement concepts.
3) extra space is not required.
4) bigger code.